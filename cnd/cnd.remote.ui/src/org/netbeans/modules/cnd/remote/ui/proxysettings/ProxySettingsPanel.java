/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.cnd.remote.ui.proxysettings;

import java.awt.BorderLayout;
import java.util.Iterator;
import javax.accessibility.Accessible;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JSeparator;
import org.netbeans.spi.options.OptionsCategory;
import org.netbeans.spi.options.OptionsPanelController;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Item;
import org.openide.util.Lookup.Result;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;
import org.openide.util.lookup.Lookups;

/**
 *
 */
public final class ProxySettingsPanel extends javax.swing.JPanel {

    static final String OD_LAYER_FOLDER_NAME = "OptionsDialog"; // NOI18N
    static final String CATEGORY_NAME = "General"; // NOI18N
    private OptionsPanelController controller = null;
    private final JComponent origPanel;
    
    private static final RequestProcessor RP = new RequestProcessor("ProxySettingsPanel", 1); // NOI18N

    /**
     * Creates new form ProxySettingsPanel
     */
    public ProxySettingsPanel() {
        initComponents();
        origPanel = findGeneralOptionsPanel();

        if (origPanel != null) {
            hideUnwantedItems();
            proxySettingPanel.add(origPanel, BorderLayout.CENTER);
        } else {
            proxySettingPanel.add(new JLabel(NbBundle.getMessage(ProxySettingsPanel.class, "ProxySettingsPanel.error.noProxySettings"))); // NOI18N
        }
    }

    public boolean isValidState() {
        if (controller == null) {
            return true;
        }

        return controller.isValid();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        proxySettingPanel = new javax.swing.JPanel();

        proxySettingPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(proxySettingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(proxySettingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel proxySettingPanel;
    // End of variables declaration//GEN-END:variables

    private void applyProxyChanges() {
        controller.applyChanges();
        controller.update();
        hideUnwantedItems();
    }

    public void applyProxyChangesIfNeed() {
        if (controller.isChanged() && controller.isValid()) {
            applyProxyChanges();
        }
    }

    private JComponent findGeneralOptionsPanel() {
        Lookup lookup = Lookups.forPath(OD_LAYER_FOLDER_NAME);
        Result<OptionsCategory> result = lookup.lookupResult(OptionsCategory.class);
        Iterator<? extends Item<OptionsCategory>> it = result.allItems().iterator();
        while (it.hasNext()) {
            Item<OptionsCategory> item = it.next();
            String categoryID = item.getId().substring(OD_LAYER_FOLDER_NAME.length() + 1);
            if (CATEGORY_NAME.equals(categoryID)) {
                controller = item.getInstance().create();
                controller.update();
                return controller.getComponent(Lookup.EMPTY);
            }
        }
        return null;
    }

    @Override
    public void setVisible(boolean aFlag) {
        hideUnwantedItems();
        super.setVisible(aFlag);
    }

    private void hideUnwantedItems() {
        int cnt = origPanel.getAccessibleContext().getAccessibleChildrenCount();
        boolean visible = false;
        boolean firstLabel = false;
        int button = 0;
        for (int i = 0; i < cnt; i++) {
            Accessible accessibleChild = origPanel.getAccessibleContext().getAccessibleChild(i);
            if (accessibleChild instanceof JComponent) {
                JComponent elem = (JComponent) accessibleChild;
                if (elem instanceof JSeparator) {
                    elem.setVisible(false);
                    visible = !visible;
                    firstLabel = true;
                    continue;
                }
                if (firstLabel && elem instanceof JLabel) {
                    firstLabel = false;
                    elem.setVisible(false);
                    continue;
                }
                if (!visible && elem.isVisible()) {
                    elem.setVisible(false);
                } else {
                    // #253316 - "Test connection" button ... works wrong
                    // I dislike this hack, but it is not worse than the entire method :-/
                    if (elem instanceof JButton) {
                        button++;
                        if (button == 3) {
                            elem.setVisible(false);
                        }
                    }
                }
            }
        }
    }
}
