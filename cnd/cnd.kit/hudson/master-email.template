<html>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<head>
<title>Hudson build report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
* { font-family: "Verdana", sans-serif; }
h1 { font-size: 14pt; }
h2 { font-size: 14pt; }
h3 { font-size: 12pt; }
p, ul, li { font-size: 12pt; }
pre { font-family: "Courier New", monospace; font-size: 10pt; }
.changeset { font-size: 9pt; }
.SUCCESS { color: green; }
.UNSTABLE { color: orange; }
.FAILURE { color: red; }
</style>
</head>
<body>

<%
def rootUrl = hudson.model.Hudson.instance.rootUrl

def currBuild = build
def prevBuild = build.previousNotFailedBuild
%>

<h1 class="${build.result}">Build Result &mdash; ${build.result}</h1>

<h2>Build Information</h2>
<ul>
<li>Build <a href="${rootUrl}${currBuild.project.url}">${currBuild.project.name}</a>
    #<a href="${rootUrl}${currBuild.url}">${currBuild.number}</a></li>
<li>Build started at ${build.timestampString2}</li>
<li>Build took ${build.durationString}</li>
</ul>

<%
def currBuild = build
def prevBuild = build.previousNotFailedBuild

def buildsSincePrev = []
def changesSincePrev = []

if (prevBuild) {
    def it = prevBuild
    while (it != currBuild) {
        buildsSincePrev << it
        it = it.nextBuild
        changesSincePrev += it.changeSet.items as List
    }
} else {
    def it = currBuild
    while (it) {
        buildsSincePrev << it
        changesSincePrev += it.changeSet.items.reverse() as List
        it = it.prevBuild
    }
    buildsSincePrev = buildsSincePrev.reverse()
    changesSincePrev = changesSincePrev.reverse()
}

def currTestResult = currBuild.getAction(hudson.tasks.junit.TestResultAction.class)
if (currTestResult) {

    def rootUrl = hudson.model.Hudson.instance.rootUrl

    def currFailedTests = currTestResult.failedTests.collect {
        [displayName: "${it.className}.${it.displayName}",
            url: "${rootUrl}${currBuild.url}${currTestResult.urlName}${it.url}",
            age: it.age]
    }
    currFailedTests = currFailedTests.sort { String.format("%06d-", it.age) + it.displayName }
    def currFailedTestNames = new HashSet(currFailedTests.collect { it.displayName })

    def prevTestResult = prevBuild?.getAction(hudson.tasks.junit.TestResultAction.class)
    def prevFailedTestNames = new HashSet(
        prevTestResult?.failedTests.collect { "${it.className}.${it.displayName}" } ?: [])

    def fixedTestNames = (prevFailedTestNames - currFailedTestNames).sort()

    def testCountDiff = currTestResult.totalCount - (prevTestResult?.totalCount ?: 0)
    def testCountDiffString = (0 < testCountDiff)? "+" + testCountDiff : String.valueOf(testCountDiff)

    def testFailDiff = currTestResult.failCount - (prevTestResult?.failCount ?: 0)
    def testFailDiffString = (0 < testFailDiff)? "+" + testFailDiff : String.valueOf(testFailDiff)

    def successRate = String.format("%.2f", (currTestResult.totalCount - currTestResult.result.failCount) * 100f / currTestResult.totalCount)
%>

<h2>Test Results</h2>

<ul>
<li>Total test count and delta: ${currTestResult.totalCount} / ${testCountDiffString}</li>
<li>Failure count and delta: ${currTestResult.failCount} / ${testFailDiffString}</li>
<li>Success rate: ${successRate}%</li>
</ul>

<% if (currFailedTests) { %>
<h3>Failing Tests</h3>
<p class="FAILURE">The following tests are failing. Age &lt; 5 means recent regression.</p>
<ul>
<% currFailedTests.each { %>
    <li><a href="${it.url}" class="FAILURE">${it.displayName}</a> (failing for ${it.age} builds)</li>
<% } %>
</ul>
<% } %>

<% if (fixedTestNames) { %>
<h3>Fixed Tests</h3>
<p class="SUCCESS">The following tests are no longer failing. Good work!</p>
<ul>
<% fixedTestNames.each { %>
    <li class="SUCCESS">$it</li>
<% } %>
</ul>
<% } %>

<% } %>


<% if (changesSincePrev) { %>
<h2>Changes since last successful build (${changesSincePrev.size()})</h2>
<ul>
<% changesSincePrev.each { change -> %>
<li>
<p><a href="http://hg.netbeans.org/cnd-main/rev/${change.shortNode}">${change.shortNode}</a> by ${change.author}</p>
<pre>${change.msg}</pre>
<ul class="changeset">
<% change.affectedFiles.eachWithIndex { file, idx -> if (idx < 20) { %>
    <li class="changeset">${file.editType.name} ${file.path}</li>
<% } } %>
<% if (20 < change.affectedFiles.size) { %>
    <li class="changeset">${change.affectedFiles.size - 20} more ...</li>
<% } %>
</ul>
</li>
<% } %>
</ul>
<% } %>

<% if (currBuild.result != hudson.model.Result.SUCCESS) { %>
<h2>Build Log</h2>
<pre>${currBuild.getLog(100).join("\n")}</pre>
<% } %>

</body>
</html>
