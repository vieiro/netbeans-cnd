/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.cnd.api.toolchain;

import java.nio.charset.Charset;
import java.util.List;
import org.netbeans.modules.cnd.toolchain.compilerset.CompilerSetImpl;

/**
 *
 */
public abstract class CompilerSet {
    /**
     * Environment variable will be expanded to tool collection base directory path
     */
    public static final String TOOLS_PATH = "TOOLS_PATH"; // NOI18N
    
    /**
     * Environment variable will be expanded to path to command folder (folder which contains utility like rm, mkdir, ...)
     */
    public static final String UTILITIES_PATH = "UTILITIES_PATH"; // NOI18N
    
    public static final String None = "None"; // NOI18N
    public static final String UNKNOWN = "Unknown"; // NOI18N

    /**
     * Get the first tool of its kind.
     *
     * @param kind The tool kind to get
     * @return The Tool or null
     */
    public abstract Tool findTool(ToolKind kind);

    /**
     *
     * @return The compiler flavor
     */
    public abstract CompilerFlavor getCompilerFlavor();

    /**
     *
     * @return The path to binaries of compilers or an empty String if this path
     * is not defined
     */
    public abstract String getDirectory();

    /**
     *
     * @return Modify path for Build, Compile, ..  commands
     */
    public abstract String getModifyBuildPath();

    /**
     *
     * @return Modify path for Run command
     */
    public abstract String getModifyRunPath();

    /**
     *
     * @return The path to folder with shell commands of MinGW tool collections.
     */
    public abstract String getCommandFolder();

    /**
     *
     * @return The full name of compiler set
     */
    public abstract String getDisplayName();

    /**
     *
     * @return The name of compiler set
     */
    public abstract String getName();

    /**
     * Get the first tool of its kind.
     *
     * @param kind The tool kind to get
     * @return The Tool or null
     */
    public abstract Tool getTool(ToolKind kind);

    /**
     *
     * @return collection of tools
     */
    public abstract List<Tool> getTools();

    /**
     *
     * @return false if tool collection explicitly created by user in the Build Tools Options
     */
    public abstract boolean isAutoGenerated();

    /**
     *
     * @return true if tool collection is represented as reference on update center and need to be installed
     */
    public abstract boolean isUrlPointer();
    
    /**
     *
     * @return tool collection encoding
     */
    public abstract Charset getEncoding();
    
    abstract public boolean isDefault();

    protected CompilerSet() {
        if (!getClass().equals(CompilerSetImpl.class)) {
            throw new UnsupportedOperationException("this class can not be overriden by clients"); // NOI18N
        }
    }
}
