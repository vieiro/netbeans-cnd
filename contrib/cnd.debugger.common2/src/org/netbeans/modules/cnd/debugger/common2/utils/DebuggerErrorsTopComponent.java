/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.cnd.debugger.common2.utils;

import java.awt.event.ActionEvent;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.netbeans.modules.cnd.debugger.common2.utils//DebuggerErrors//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "DebuggerErrorsTopComponent",//NOI18N
        iconBase = "org/netbeans/modules/cnd/debugger/common2/icons/debugger_errors.png",//NOI18N
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false, position = 1455)
@ActionID(category = "Window", id = "org.netbeans.modules.cnd.debugger.common2.utils.DebuggerErrorsTopComponent")
@ActionReference(path = "Menu/Window/Debug" , position = 1550)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DebuggerErrorsAction", //NOI18N
        preferredID = "DebuggerErrorsTopComponent"//NOI18N
)
@Messages({
    "CTL_DebuggerErrorsAction=Debugger Errors",
    "CTL_DebuggerErrorsTopComponent=Debugger Errors",
    "HINT_DebuggerErrorsTopComponent=This is a Debugger Errors window"
})
public final class DebuggerErrorsTopComponent extends TopComponent {
    static final String PREFERRED_ID = "DebuggerErrorsTopComponent";//NOI18N

    public DebuggerErrorsTopComponent() {
        initComponents();
        initTextArea();
        setName(Bundle.CTL_DebuggerErrorsTopComponent());
        setToolTipText(Bundle.HINT_DebuggerErrorsTopComponent());
    }
    
    
    public static synchronized DebuggerErrorsTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win instanceof DebuggerErrorsTopComponent) {
            return (DebuggerErrorsTopComponent) win;
        }
        if (win == null) {
            Logger.getLogger(DebuggerErrorsTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");//NOI18N
        } else {
            Logger.getLogger(DebuggerErrorsTopComponent.class.getName()).warning(
                    "There seem to be multiple components with the '" + PREFERRED_ID//NOI18N
                    + "' ID. That is a potential source of errors and unexpected behavior.");//NOI18N
        }

        DebuggerErrorsTopComponent result = new DebuggerErrorsTopComponent();
        Mode outputMode = WindowManager.getDefault().findMode("output");//NOI18N

        if (outputMode != null) {
            outputMode.dockInto(result);
        }
        return result;
    }    
    
    /*package*/ void setErrorDoc(Document errorDoc) {
        textArea.setDocument(errorDoc);
        //revalidate();
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                open();
                //requestActive();
                requestAttention(false);

            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");//NOI18N
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");//NOI18N
        // TODO read your settings according to their version
    }

    private void initTextArea() {
        textArea.setEditable(false);
        textArea.setEditable(false);
        textArea.setWrapStyleWord(true);
        textArea.setLineWrap(true);
        textArea.setBackground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Label.background")); // NOI18N
        textArea.setBorder(BorderFactory.createEmptyBorder());        
        JPopupMenu menu = new JPopupMenu();
        menu.add(new AbstractAction("clear") {//NOI18N
            @Override
            public void actionPerformed(ActionEvent e) {
                if (textArea.getDocument() == null) {
                    return;
                }
                try {
                    textArea.getDocument().remove(textArea.getDocument().getStartPosition().getOffset(), 
                            textArea.getDocument().getEndPosition().getOffset() -1);
                } catch (BadLocationException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
        textArea.setComponentPopupMenu(menu);
    }
}
