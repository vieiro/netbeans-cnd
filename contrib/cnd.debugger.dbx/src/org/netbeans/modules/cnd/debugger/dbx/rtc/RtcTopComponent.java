/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.cnd.debugger.dbx.rtc;

import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.modules.terminal.api.ui.IOTopComponent;
import org.netbeans.modules.terminal.api.ui.TerminalContainer;
import org.openide.windows.IOContainer;
import org.openide.windows.Mode;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.netbeans.modules.cnd.debugger.dbx.rtc//Rtc//EN",
autostore = false)
public final class RtcTopComponent extends TopComponent implements IOTopComponent
{

    private static RtcTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/netbeans/modules/cnd/debugger/dbx/rtc/runtime_checking.png"; // NOI18N
    private static final String PREFERRED_ID = "RtcTopComponent"; // NOI18N

    public RtcTopComponent() {
	initComponents();
	setName(NbBundle.getMessage(RtcTopComponent.class, "CTL_RtcTopComponent"));
	setToolTipText(NbBundle.getMessage(RtcTopComponent.class, "HINT_RtcTopComponent"));
	setIcon(ImageUtilities.loadImage(ICON_PATH, true));
	initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                setLayout(new java.awt.BorderLayout());
        }// </editor-fold>//GEN-END:initComponents

        // Variables declaration - do not modify//GEN-BEGIN:variables
        // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized RtcTopComponent getDefault() {
	if (instance == null) {
	    instance = new RtcTopComponent();
	}
	return instance;
    }

    /**
     * Obtain the RtcTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized RtcTopComponent findInstance() {
	TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
	if (win == null) {
	    Logger.getLogger(RtcTopComponent.class.getName()).warning(
		    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system."); // NOI18N
	    return getDefault();
	}
	if (win instanceof RtcTopComponent) {
	    return (RtcTopComponent) win;
	}
	Logger.getLogger(RtcTopComponent.class.getName()).warning(
		"There seem to be multiple components with the '" + PREFERRED_ID // NOI18N
		+ "' ID. That is a potential source of errors and unexpected behavior."); // NOI18N
	return getDefault();
    }

    @Override
    public int getPersistenceType() {
	return TopComponent.PERSISTENCE_ALWAYS;
    }

    // interface TopComponent
    @Override
    public void open() {
	if (isOpened() && isShowing())
	    return;

	// Workaround per http://wiki.netbeans.org/DevFaqWindowsOpenInMode
	WindowManager wm = WindowManager.getDefault();
	Mode mode = wm.findMode(this);        // mode to which we belong
	if (mode == null) {
	    // if not in any mode, dock us into the default mode
	    mode = wm.findMode("output"); // NOI18N
	}
	mode.dockInto(this);

	super.open();
    }

    @Override
    public void componentOpened() {
	// TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
	// TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
	// better to version settings since initial version as advocated at
	// http://wiki.apidesign.org/wiki/PropertyFiles
	p.setProperty("version", "1.0"); // NOI18N
	// TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
	if (instance == null) {
	    instance = this;
	}
	instance.readPropertiesImpl(p);
	return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
	String version = p.getProperty("version");
	// TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
	return PREFERRED_ID;
    }

    //
    // Implementation of IOTopComponent
    //
    private TerminalContainer tc;

    public IOContainer ioContainer() {
        return tc.ioContainer();
    }

    public TopComponent topComponent() {
        return this;
    }

    private void initComponents2() {
        tc = TerminalContainer.createMuxable(this, getName());
        add(tc);
    }
}
