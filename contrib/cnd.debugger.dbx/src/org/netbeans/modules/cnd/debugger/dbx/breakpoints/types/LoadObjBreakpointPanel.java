/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.cnd.debugger.dbx.breakpoints.types;

import org.netbeans.modules.cnd.debugger.common2.debugger.breakpoints.NativeBreakpoint;
import org.netbeans.modules.cnd.debugger.common2.debugger.breakpoints.BreakpointPanel;
import java.awt.Component;
import javax.swing.*;

import org.netbeans.modules.cnd.debugger.common2.utils.IpeUtils;
import org.netbeans.modules.cnd.debugger.common2.values.DlEvent;

class LoadObjBreakpointPanel extends BreakpointPanel {

    private LoadObjBreakpoint fb;
    
    public void seed(NativeBreakpoint breakpoint) {
	seedCommonComponents(breakpoint);
	fb = (LoadObjBreakpoint) breakpoint;

	String loadObj = fb.getLoadObj();
	if (loadObj == null)
	    loadObj = DlEvent.all();
	loadObjCombo.setSelectedItem(loadObj);

	if (fb.getDlEvent() == DlEvent.OPEN)
	    openToggle.setSelected(true);
	else
	    closeToggle.setSelected(true);
    }

    /*
     * Constructors
     */
    public LoadObjBreakpointPanel() {
	this (new LoadObjBreakpoint(NativeBreakpoint.TOPLEVEL), false);
    }

    public LoadObjBreakpointPanel(NativeBreakpoint b) {
	this ((LoadObjBreakpoint)b, true);
    }
    
    /** Creates new form LoadObjBreakpointPanel */
    public LoadObjBreakpointPanel(LoadObjBreakpoint breakpoint,
				  boolean customizing) {
	super(breakpoint, customizing);
	fb = breakpoint;

	initComponents();
	addCommonComponents(3);

	/** Items in the combo boxes */
	final String[] comboValues = {
	    DlEvent.all(),
	};
	loadObjCombo.setModel(new DefaultComboBoxModel(comboValues));
	loadObjCombo.setSelectedIndex(0);
	loadObjCombo.setEditable(true);
	Component c = loadObjCombo.getEditor().getEditorComponent();
	if (c instanceof javax.swing.text.JTextComponent) {
	    javax.swing.text.Document d =
		((javax.swing.text.JTextComponent)c).getDocument();
	    d.addDocumentListener(this);
	}
	// XXX should initialize loadobject list here...

	seed(breakpoint);
    }
    
    public void setDescriptionEnabled(boolean enabled) {
	// loadObjLabel.setEnabled(false);
	loadObjCombo.setEnabled(false);
	openToggle.setEnabled(false);
	closeToggle.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
	buttonGroup1 = new javax.swing.ButtonGroup();
	loadObjLabel = new javax.swing.JLabel();
	loadObjCombo = new javax.swing.JComboBox();
	openToggle = new javax.swing.JRadioButton();
	closeToggle = new javax.swing.JRadioButton();

	panel_settings.setLayout(new java.awt.GridBagLayout());
	java.awt.GridBagConstraints gridBagConstraints1;

	loadObjLabel.setText(Catalog.get("LoadObject"));// NOI18N
	loadObjLabel.setDisplayedMnemonic(
	    Catalog.getMnemonic("MNEM_LoadObject"));	// NOI18N
	loadObjLabel.setLabelFor(loadObjCombo);
	gridBagConstraints1 = new java.awt.GridBagConstraints();
	gridBagConstraints1.ipadx = 5;
	gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
	panel_settings.add(loadObjLabel, gridBagConstraints1);

	loadObjCombo.setEditable(true);
	gridBagConstraints1 = new java.awt.GridBagConstraints();
	gridBagConstraints1.gridwidth = 3;
	gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
	gridBagConstraints1.weightx = 1.0;
	panel_settings.add(loadObjCombo, gridBagConstraints1);

	openToggle.setText(DlEvent.OPEN.toString());
	openToggle.setMnemonic(
	    Catalog.getMnemonic("MNEM_OnOpen"));	// NOI18N
	buttonGroup1.add(openToggle);
	gridBagConstraints1 = new java.awt.GridBagConstraints();
	gridBagConstraints1.gridx = 0;
	gridBagConstraints1.gridwidth = 4;
	gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
	panel_settings.add(openToggle, gridBagConstraints1);

	closeToggle.setText(DlEvent.CLOSE.toString());
	closeToggle.setMnemonic(
	    Catalog.getMnemonic("MNEM_OnClose"));	// NOI18N
	buttonGroup1.add(closeToggle);
	gridBagConstraints1 = new java.awt.GridBagConstraints();
	gridBagConstraints1.gridx = 0;
	gridBagConstraints1.gridwidth = 4;
	gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
	panel_settings.add(closeToggle, gridBagConstraints1);

	// a11y
	loadObjCombo.getAccessibleContext().setAccessibleDescription(
	    Catalog.get("ACSD_LoadObject") // NOI18N
	);
	openToggle.getAccessibleContext().setAccessibleDescription(
	    openToggle.getText()
	);
	closeToggle.getAccessibleContext().setAccessibleDescription(
	    closeToggle.getText()
	);

    }//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel loadObjLabel;
    private javax.swing.JComboBox loadObjCombo;
    private javax.swing.JRadioButton openToggle;
    private javax.swing.JRadioButton closeToggle;
    // End of variables declaration//GEN-END:variables

    protected void assignProperties() {
	// point of no return
	String loadObj = loadObjCombo.getSelectedItem().toString();
	if (loadObj.equals(DlEvent.all()))
	    loadObj = null;
	fb.setLoadObj(loadObj);
	if (openToggle.isSelected())
	    fb.setDlEvent(DlEvent.OPEN);
	else
	    fb.setDlEvent(DlEvent.CLOSE);
    }
    
    protected boolean propertiesAreValid() {
	Component c = loadObjCombo.getEditor().getEditorComponent();
	if (c instanceof javax.swing.text.JTextComponent) {
	    String text = ((javax.swing.text.JTextComponent)c).getText();
	    if (IpeUtils.isEmpty(text)) {
		return false;
	    } else {
		return true;
	    }
	} else if (IpeUtils.isEmpty(loadObjCombo.getSelectedItem().toString())) {
	    return false;
	}
	return true;
    }
}
