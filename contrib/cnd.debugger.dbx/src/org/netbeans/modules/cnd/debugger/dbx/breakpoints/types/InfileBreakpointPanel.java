/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.cnd.debugger.dbx.breakpoints.types;

import org.netbeans.modules.cnd.debugger.common2.debugger.breakpoints.NativeBreakpoint;
import org.netbeans.modules.cnd.debugger.common2.debugger.breakpoints.BreakpointPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;

import org.openide.text.Line;

import org.netbeans.modules.cnd.debugger.common2.utils.IpeUtils;
import org.netbeans.modules.cnd.debugger.common2.debugger.EditorBridge;

class InfileBreakpointPanel extends BreakpointPanel {

    private InfileBreakpoint ifb;

    private JLabel filenameLabel;
    private JTextField filenameText;

    public void seed(NativeBreakpoint breakpoint) {
	seedCommonComponents(breakpoint);
	ifb = (InfileBreakpoint) breakpoint;

	String s = ifb.getFileName();
	if (!IpeUtils.isEmpty(s))
	    filenameText.setText(s.trim());
    }

    /*
     * Constructors
     */

    public InfileBreakpointPanel() {
	this(new InfileBreakpoint(NativeBreakpoint.TOPLEVEL), false);
    }

    public InfileBreakpointPanel(NativeBreakpoint b) {
	this((InfileBreakpoint)b, true);
    }

    /** Creates new form InfileBreakpointPanel */
    private InfileBreakpointPanel(InfileBreakpoint breakpoint,
				boolean customizing) {
	super(breakpoint, customizing);
	ifb = breakpoint;
	initComponents();
	addCommonComponents(1);

	if (!customizing) {
	    Line l = EditorBridge.getCurrentLine();
	    if (l != null) {
		String fname = EditorBridge.filenameFor(l);
		breakpoint.setFileName(fname);
	    }
	}

	seed(breakpoint);

	// Arrange to revalidate on changes
	filenameText.getDocument().addDocumentListener(this);

	filenameText.requestFocus();
    }

    public void setDescriptionEnabled(boolean enabled) {
	filenameText.setEnabled(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
	panel_settings.setLayout(new java.awt.GridBagLayout());

	filenameLabel = new JLabel();
	filenameText = new JTextField();
	    java.awt.GridBagConstraints gbc;
	    filenameLabel.setText(Catalog.get("LBL_Filename")); // NOI18N
	    filenameLabel.setDisplayedMnemonic(
		Catalog.getMnemonic("MNEM_Filename"));	// NOI18N
	    filenameLabel.setLabelFor(filenameText);
	    gbc = new java.awt.GridBagConstraints();
	    gbc.ipadx = 5;
	    gbc.anchor = java.awt.GridBagConstraints.WEST;
	    panel_settings.add(filenameLabel, gbc);

	    gbc = new java.awt.GridBagConstraints();
	    gbc.gridwidth = 3;
	    gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
	    gbc.weightx = 1.0;
	    panel_settings.add(filenameText, gbc);

	// a11y
	filenameText.getAccessibleContext().setAccessibleDescription(
	    Catalog.get("ACSD_Filename") // NOI18N
	);
    }

    protected void assignProperties() {
	ifb.setFileName(filenameText.getText());
    }
    
    protected boolean propertiesAreValid() {
	if (IpeUtils.isEmpty(filenameText.getText()))
	    return false;
	return true;
    }
}
