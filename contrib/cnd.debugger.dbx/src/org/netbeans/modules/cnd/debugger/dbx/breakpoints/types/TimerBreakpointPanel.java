/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.cnd.debugger.dbx.breakpoints.types;

import org.netbeans.modules.cnd.debugger.common2.debugger.breakpoints.NativeBreakpoint;
import org.netbeans.modules.cnd.debugger.common2.debugger.breakpoints.BreakpointPanel;
import org.netbeans.modules.cnd.debugger.common2.utils.IpeUtils;

class TimerBreakpointPanel extends BreakpointPanel {

    private TimerBreakpoint fb;
    
    public void seed(NativeBreakpoint breakpoint) {
	seedCommonComponents(breakpoint);
	fb = (TimerBreakpoint) breakpoint;

	timerText.setText(Float.toString(fb.getSeconds()));
    }

    /*
     * Constructors
     */

    public TimerBreakpointPanel() {
	this(new TimerBreakpoint(NativeBreakpoint.TOPLEVEL), false);
    }

    public TimerBreakpointPanel(NativeBreakpoint b) {
	this((TimerBreakpoint)b, true);
    }

    /** Creates new form TimerBreakpointPanel */
    public TimerBreakpointPanel(TimerBreakpoint breakpoint,
				boolean customizing) {
	super(breakpoint, customizing);
	fb = breakpoint;

	initComponents();
	addCommonComponents(1);

	seed(breakpoint);

	// Arrange to revalidate on changes
	timerText.getDocument().addDocumentListener(this);
    }

    public void setDescriptionEnabled(boolean enabled) {
	// timerLabel.setEnabled(false);
	timerText.setEnabled(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
	timerLabel = new javax.swing.JLabel();
	timerText = new javax.swing.JTextField();

	panel_settings.setLayout(new java.awt.GridBagLayout());
	java.awt.GridBagConstraints gridBagConstraints1;

	timerLabel.setText(Catalog.get("Seconds"));	// NOI18N
	timerLabel.setDisplayedMnemonic(
	    Catalog.getMnemonic("MNEM_Seconds"));	// NOI18N
	timerLabel.setLabelFor(timerText);
	gridBagConstraints1 = new java.awt.GridBagConstraints();
	gridBagConstraints1.ipadx = 5;
	gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
	panel_settings.add(timerLabel, gridBagConstraints1);

	gridBagConstraints1 = new java.awt.GridBagConstraints();
	gridBagConstraints1.gridwidth = 3;
	gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
	gridBagConstraints1.weightx = 1.0;
	panel_settings.add(timerText, gridBagConstraints1);

	// a11y
	timerText.getAccessibleContext().setAccessibleDescription(
	    Catalog.get("ACSD_Seconds") // NOI18N
	);
    }

    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JTextField timerText;

    protected void assignProperties() {
	String timerValue = timerText.getText();
	float f = 0;
	try {
	    f = Float.parseFloat(timerValue);
	} catch (NumberFormatException e) {
	    // We should've dealt with this during propertiesAreValid()
	    f = 1.0f;
	}

	fb.setSeconds(f);
    }
    
    protected boolean propertiesAreValid() {
	String timerValue = timerText.getText();
	if (!IpeUtils.isEmpty(timerValue)) {
	    try {
		float f = Float.parseFloat (timerValue);
		if (f < 0)
		    return false;
	    } catch (NumberFormatException e) {
		return false;
	    }
	    return true;
	} else {
	    return false;
	}
    }
}
