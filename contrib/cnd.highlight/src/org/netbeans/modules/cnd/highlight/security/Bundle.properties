# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

LAB_security_error=Security Error
LAB_security_warning=Security Warning

SecurityCheck_NAME=C Library Functions
SecurityCheck_DESCRIPTION=Check the usage of the insecure C library functions
DisableHint=Configure Hints

#AvoidFunctionUsage
FunctionUsageAudit.name=Using {0}
FunctionUsageAudit.alternative=\nAlternative: {0}

#issues descriptions
FunctionUsageAudit.gets.description=This function does not check for bounds while storing the input. This function can't be used securely.

FunctionUsageAudit.cftime.description=These routines do no bounds checking on the output buffer and may import user-data through the environment variable CFTIME

FunctionUsageAudit.strcat.description=It is not possible to limit these functions to a maximum buffer size.\n\
    The use of these functions will always force reviewers to follow the logic, and prevent automated scanning of source code for vulnerabilities.

FunctionUsageAudit.access.description=This function is useless because the information it provides is outdated by the time you get to use it.\n\
    Using access() followed by open() has a race condition that can't be solved.

FunctionUsageAudit.strncat.description=strncat() is hard to use as it requires the proper size of the destination buffer to be calculated

FunctionUsageAudit.strncpy.description=strncpy() is not guaranteed to null-terminate the destination buffer.

FunctionUsageAudit.chmod.description=These functions operate on pathnames and are prone to race conditions. \n\
    Normally, programs shouldn't need to call chown/chmod but honor the current uid (switch back to it before opening files.) and umask.

FunctionUsageAudit.alloca.description=Does not check if the returned pointer is within the stack bounds -\n\
    and for memory allocations larger than a page may jump over stack guard page into other allocated pages and overwrite them.

FunctionUsageAudit.drand48.description=This is a weak random number generator; it is not useful for security purposes.

FunctionUsageAudit.execvp.description=These functions are too dangerous to use in libraries or privileged commands and daemons because they find the executable \n\
    by searching the directories in the PATH environment variable, which is under the complete control of the user.

FunctionUsageAudit.sprintf.description=Typical buffer overflow cause. If, for whatever reason, you must use these functions, make sure that the second \n\
    argument can't be user-controlled and that you can trust the parameters not to overflow the destination buffer.

FunctionUsageAudit.getlogin.description=The value returned by getlogin() is not reliable, it is a mere hint as to the user name.

FunctionUsageAudit.getpass.description=Only the first 8 bytes of input are used. Avoid using it in new code.

FunctionUsageAudit.mktemp.description=Generates temporary filename, but the use of the generated pathname is not guaranteed safe since there is a race condition \n\
    between the checks in mktemp() and the subsequent open() by the application.

FunctionUsageAudit.popen.description=This library call always involve the shell which involves PATH, IFS, other environment variables and interpretation of special characters. \n\
    Use posix_spawn() to execute other programs, with waitpid() or pipe() as necessary.

FunctionUsageAudit.tempnam.description=This function is not suitable for generating unpredictable filenames. \n\
    There is a race condition between the generation of the filename and its use in, e.g., open()

FunctionUsageAudit.truncate.description=This function is prone to pathname race conditions. \n\
    Use ftruncate() after a safe open().

FunctionUsageAudit.utmpname.description=Use the default utmp and utmpx files.

FunctionUsageAudit.kvm_open.description=Generates temporary filename, but the use of the generated pathname is not guaranteed safe since there \n\
    is a race condition between the checks in mktemp() and the subsequent open() by the application.

FunctionUsageAudit.open.description=When opening for reading from a privileged program, make sure that you open the file as the user by dropping privileges or setting the effective uid to the real uid. \n\
    When opening for writing use the O_NOFOLLOW and O_NOLINKS flags, or use O_CREAT|O_EXCL to ensure that a new file is created instead of opening an existing file. \n\
    When opening a file, consider if the file descriptor should be kept open across an exec() call.

FunctionUsageAudit.dup.description=Return file descriptors with the FD_CLOEXEC cleared so that they may leak when a program calls exec(). Older code made fcntl() calls shortly after \n\
    these functions returned to set that flag, but in multi-threaded code (including programs that only run one thread themselves, but may be linked \n\
    with libraries that run additional threads), that leaves a window open for a race with another thread. The F_DUPFD_CLOEXEC & F_DUP2FD_CLOEXEC calls \n\
    to fcntl (available in Solaris 11 and later releases) combine the duplication & flag setting into an atomic operation so there is no race.

FunctionUsageAudit.fopen.description=It's not possible to safely create files this way. However, once a pathname is verified to exist, e.g., after mkstemp(), \n\
    it can be used to open those pathnames. In other cases, a safe invocation of open() followed by fdopen() should be used.

FunctionUsageAudit.lstat.description=This function not is suitable to check for the existence or absence of a file. Followed by open() it has an inherent race condition that can't be solved.

FunctionUsageAudit.bcopy.description=Should not be used for copying strings, even though the length may be known.

FunctionUsageAudit.catopen.description=Libraries and programs should not call catopen() on user supplied pathnames. \n\
    User supplied message catalogues can be leveraged to break privileged code easily.

FunctionUsageAudit.chdir.description=This function is open to pathname race conditions. Do not use in multi-threaded programs. \n\
    To avoid the race condition, use fchdir() after the directory has been open()-ed and the properties have been checked using fstat()).

FunctionUsageAudit.chroot.description=chroot'ed environments offer little protection; programs can easily escape. Make sure you run no privileged programs \n\
    in a chroot()'ed environment and that you chdir() to a point below the new root after the chroot().

FunctionUsageAudit.copylist.description=This function opens files and should only be used to open known-safe pathnames.

FunctionUsageAudit.dlopen.description=Parameters passed to dlopen should only be unqualified pathnames which are then found using the runtime linker's path, \n\
    or full pathnames not in any way derived from user input (including from argv[0] !!!) There is no way to safely open a user-supplied shared object; \n\
    the object's _init() function is executed before dlopen() returns.

FunctionUsageAudit.execl.description=Make sure that the environment is sanitized and unneeded file descriptors are closed before executing a new program.

FunctionUsageAudit.fattach.description=Check the file descriptor after open (using fstat()), not the pathname before the open.

FunctionUsageAudit.printf.description=At risk from user-specified format strings. \n\
    If the format string comes from a message catalog, verify your NLSPATH manipulations and catopen()/catget() uses.

FunctionUsageAudit.snprintf.description=At risk from user-specified format strings. \n\
    If the format string comes from a message catalog, verify your NLSPATH manipulations and catopen()/catget() uses. \n\
    snprintf() and vsnprintf() return the number of characters that would have been written to the buffer if it were large enough. \n\
    Note: none of the arguments may point to the output buffer.

FunctionUsageAudit.swprintf.description=At risk from user-specified format strings. \n\
    If the format string comes from a message catalog, verify your NLSPATH manipulations and catopen()/catget() uses. \n\
    Note: none of the arguments may point to the output buffer.

FunctionUsageAudit.syslog.description=At risk from user-specified format strings. \n\
    If the format string comes from a message catalog, verify your NLSPATH manipulations and catopen()/catget() uses.

FunctionUsageAudit.scanf.description=When scanning strings, make sure the format specified includes maximum buffer lengths. \n\
    Note that the corresponding buffer must be at least 1 byte larger to allow space for the terminating NUL character.

FunctionUsageAudit.ftw.description=Follows symbolic links and crosses mount points. \n\
    Use nftw with the appropriate flags set (a combination of FTW_PHYS and FTW_MOUNT).

FunctionUsageAudit.getenv.description=The environment is completely user-specified. When possible, use of getenv() should be avoided in libraries. \n\
    Strings returned by getenv() can be up to NCARGS bytes long (that's currently 1MB for 32-bit environments.) \n\
    Pathnames derived from environment variables should not be trusted. \n\
    They should not be used as input for any of the *open() functions (including catopen() and dlopen()).

FunctionUsageAudit.mkdir.description=Be careful about the path used. \n\
    This function will not follow symlinks for the last component, so they are relatively safe.

FunctionUsageAudit.strccpy.description=It is not possible to limit these functions to a maximum buffer size. \n\
    The use of these functions will always force reviewers to follow the logic, and prevent automated scanning of source code for vulnerabilities.

FunctionUsageAudit.umask.description=Shouldn't be used in libraries or applications; \n\
    the user knows best and his umask should be used. Also not multi-thread safe.

