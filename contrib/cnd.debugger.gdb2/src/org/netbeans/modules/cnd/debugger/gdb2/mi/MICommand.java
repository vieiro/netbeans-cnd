/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.cnd.debugger.gdb2.mi;

import java.util.Collection;

/**
 * A command to be sent to the engine and to handle results.
 */

public abstract class MICommand {
    private final int routingToken;
    private final String command;	// including args

    private MICommandManager manager;	// ... managing us
    private int token;			// ... generated by manager

    private java.util.List<String> logStream;
					// stores log stream data assoc. with
					// this command.

    private java.util.List<String> consoleStream;
					// stores console stream data assoc.
					// with this command.

    private final boolean consoleCommand;

    /**
     * Constructor for commands.
     */

    public MICommand(int routingToken, String command) {
	this.routingToken = routingToken;
	this.command = command;
        this.consoleCommand = !command.startsWith("-"); // NOI18N
    } 


    @Override
    public String toString() {
        StringBuilder res = new StringBuilder();
        if (routingToken != 0) {
            res.append('(');
            res.append(routingToken);
            res.append(')');
        }
        res.append(token);
        res.append(command);
	return res.toString();
    }


    /**
     * Retrieve the routingToken.
     */

    public int routingToken() {
	return routingToken;
    } 

    /**
     * Retrieve full value of command (with possible arguments).
     */

    public String command() {
	return command;
    } 


    /**
     * Called on receipt of "^done".
     */

    protected abstract void onDone(MIRecord record);


    /**
     * Called on receipt of "^running".
     */

    protected abstract void onRunning(MIRecord record);


    /**
     * Called on receipt of "^error".
     */

    protected abstract void onError(MIRecord record);


    /**
     * Called on receipt of "^exit".
     */

    protected abstract void onExit(MIRecord record);


    /**
     * Called on receipt of "*stopped".
     */

    protected abstract void onStopped(MIRecord record);


    /**
     * Called on receipt of "^connected" and "*&lt;others&gt;".
     */

    protected abstract void onOther(MIRecord record);

    /**
     * Called when we see something like this 
     * > 
     * in the log.
     */
    protected abstract void onUserInteraction(MIUserInteraction ui);


    /**
     * Specialization should call this method to take command out of 
     * managers pending list.
     */
    protected void finish() {
	if (manager == null)
	    return;
	else
	    manager.finish(this);
    }


    /**
     * Used by MICommandManager.
     */

    void setManagerData(MICommandManager manager, int token) {
	assert manager != null;
	assert this.manager == null : "MICommand can only be sent once";
	this.manager = manager;
	this.token = token;
    } 


    /**
     * Used by MICommandManager.
     */

    public int getToken() {
	assert token != 0 :
	       "MICommand.getToken(): " + // NOI18N
	       "cannot access before command has been sent"; // NOI18N
	return token;
    } 

    /**
     * Used by MICommandManager.
     */
    void recordLogStream(Collection<String> data) {
	if (logStream == null) {
	    logStream = new java.util.LinkedList<String>();
        }
	logStream.addAll(data);
    }

    /**
     * Used by MICommandManager.
     */
    void recordConsoleStream(Collection<String> data) {
	if (consoleStream == null) {
	    consoleStream = new java.util.LinkedList<String>();
        }
        for (String elem : data) {
            if (elem.startsWith("> ")) {		// NOI18N
                onUserInteraction(new MIUserInteraction(getConsoleStream()));
            } else {
                consoleStream.add(elem);
            }
        }
    }

    /**
     * Return accumulated log stream data for this command. May return null.
     */
    public String getLogStream() {
	if (logStream == null)
	    return null;
	StringBuilder sb = new StringBuilder();
	for (String s : logStream)
	    sb.append(s);
	return sb.toString();
    }

    /**
     * Return accumulated console stream data for this command. May return null.
     */
    public String getConsoleStream() {
	if (consoleStream == null)
	    return null;
	StringBuilder sb = new StringBuilder();
	for (String s : consoleStream)
	    sb.append(s);
	return sb.toString();
    }
   
    public final boolean isConsoleCommand() {
        return consoleCommand;
    }
}

