/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.netbeans.modules.dlight.sendto.conifg.ui;

import org.netbeans.modules.dlight.sendto.api.OutputMode;
import org.netbeans.modules.dlight.sendto.output.OutputPatternsEditSupport;
import javax.swing.JPanel;

/**
 *
 */
public class OutputConfigurationPanel extends JPanel {

    private OutputMode mode = OutputMode.OUTPUT_WINDOW;

    /**
     * Creates new form OutputConfigurationPanel
     */
    public OutputConfigurationPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbInTerminal = new javax.swing.JCheckBox();
        btnModifyParsers = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(cbInTerminal, org.openide.util.NbBundle.getMessage(OutputConfigurationPanel.class, "OutputConfigurationPanel.cbInTerminal.text")); // NOI18N
        cbInTerminal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbInTerminalActionPerformed(evt);
            }
        });
        add(cbInTerminal, java.awt.BorderLayout.LINE_START);

        btnModifyParsers.setForeground(new java.awt.Color(0, 48, 255));
        org.openide.awt.Mnemonics.setLocalizedText(btnModifyParsers, org.openide.util.NbBundle.getMessage(OutputConfigurationPanel.class, "OutputConfigurationPanel.btnModifyParsers.text")); // NOI18N
        btnModifyParsers.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnModifyParsers.setBorderPainted(false);
        btnModifyParsers.setContentAreaFilled(false);
        btnModifyParsers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModifyParsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyParsersActionPerformed(evt);
            }
        });
        add(btnModifyParsers, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void cbInTerminalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbInTerminalActionPerformed
        OutputMode newMode = cbInTerminal.isSelected()
                ? OutputMode.INTERNAL_TERMINAL
                : OutputMode.OUTPUT_WINDOW;
        setOutputMode(newMode);
    }//GEN-LAST:event_cbInTerminalActionPerformed

    private void btnModifyParsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyParsersActionPerformed
        OutputPatternsEditSupport.openEditor();
    }//GEN-LAST:event_btnModifyParsersActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnModifyParsers;
    private javax.swing.JCheckBox cbInTerminal;
    // End of variables declaration//GEN-END:variables

    public OutputMode getOutputMode() {
        return mode;
    }

    public void setOutputMode(OutputMode newMode) {
        mode = newMode;
        cbInTerminal.setSelected(newMode == OutputMode.INTERNAL_TERMINAL);
        btnModifyParsers.setEnabled(newMode == OutputMode.OUTPUT_WINDOW);
    }
}
