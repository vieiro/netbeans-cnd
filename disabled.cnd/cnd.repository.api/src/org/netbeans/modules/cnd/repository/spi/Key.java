
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.cnd.repository.spi;


/**
 * interface for repository keys, must be implemented in client of repository
 */
public interface Key {
    /** returns associated factory
     * @return associated factory
     */
    PersistentFactory getPersistentFactory();

    /** return a unit which serves as a sign of global set of keys, e.g., 
     *  projects in the IDE
     * @return the unit
     */
    CharSequence getUnit();

    /** return a unit id which serves as a sign of global set of keys, e.g., 
     *  projects in the IDE
     * @return the unit
     */
    int getUnitId();
    
    /** Behaviors allow repository to optimize
     *  storing files
     */
    enum Behavior { 
        Default, // default behavior
        LargeAndMutable   // mutable object; tends to change it's state *a lot*
    }

    /** returns behavior of the object 
     * @return key Behavior
     */
    Behavior getBehavior();

    /**
     * return true if key may have a local L1 cache
     * @return
     */
    public boolean hasCache();
    
    /** returns depth of primary key's hierarchy *
     * @return depth of primary key's hierarchy
     */
    int getDepth();
    
    /** returns n-th element of primary hierarchy *
     * @param level n
     * @return n-th primary element
     */
    CharSequence getAt(int level);
    
    /** returns depth of secondary key's hierarchy *
     * @return secondary depth
     */
    int getSecondaryDepth();
    
    /** returns n-th element of secondary hierarchy *
     * @param level n
     * @return n-th secondary element
     */
    int getSecondaryAt(int level);
    
 /**
     * Hash code generator.
     * Used for counting hash code.
     * Hash code must be generated by using this method, i.e.
     * <code>
     * int hashCode() {
     *   return hashCode(getUnitId())
     * }
     * </code>
     * Method must satisfy condition:
     * hashCode(i) == hashCode(0) + i
     * 
     * @param unitID
     * @return 
     */
    int hashCode(int unitID);
    
/**
     * Equals with extracted unit ID.
     * Used for counting equals of objects.
     * Equals must be delegated to this method, i.e.
     * <code>
     * public boolean equals(Object obj) {
     *   if (this == obj) {
     *     return true;
     *   }
     *   if (obj == null || (this.getClass() != obj.getClass())) {
     *     return false;
     *   }
     *   Key other = (Key) obj;
     *   return equals(getUnitId(), other, other.getUnitId());
     * }
     * </code>
     * 
     * @param thisUnitID
     * @param object
     * @param objectUnitID
     * @return 
     */
    
    public abstract boolean equals(int thisUnitID, Key object, int objectUnitID);
}
