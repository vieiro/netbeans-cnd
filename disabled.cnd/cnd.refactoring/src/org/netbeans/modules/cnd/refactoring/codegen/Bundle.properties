# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

complete-line-newline=Complete Line and Create New Line
complete-line=Complete Line

LBL_constructor=Constructor...
LBL_generate_constructor=Generate Constructor
LBL_super_constructor_select=Select super &constructors:
LBL_constructor_select=&Select fields to be initialized by constructor:
LBL_copy_constructor=Copy Constructor
LBL_getter=Getter...
LBL_getter_field_select=&Select fields to generate getters for:
LBL_setter=Setter...
LBL_setter_field_select=&Select fields to generate setters for:
LBL_getter_and_setter=Getter and Setter...
LBL_getter_and_setter_field_select=&Select fields to generate getters and setters for:
LBL_implement_method=Implement Method...
LBL_generate_implement=Generate Implement Methods
LBL_implement_method_select=Select methods to implement:
LBL_override_method=Override Method...
LBL_generate_override=Generate Override Methods
LBL_override_method_select=Select methods to override:
LBL_delegate_method=Delegate Method...
LBL_generate_delegate=Generate Delegate Methods
LBL_delegate_field_select=Select target field to generate delegates for:
LBL_delegate_method_select=Select methods to generate delegates for:

#A11Y Descriptions
A11Y_Generate_Constructor=Generate Constructor Dialog
A11Y_Generate_Operators=Generate Operators Dialog
A11Y_Generate_Delegate=Delegate Method Dialog
A11Y_Generate_GetterSetter=Generate Getter and Setter Methods
A11Y_Generate_ImplementOverride=Implement/Override Method Dialog

#Operators
LBL_operatorArithmetic=Arithmetic Operators...
LBL_operatorRelational=Relational Operators..
LBL_operatorAssignment=Assignment Operator...
LBL_operatorPointer=Pointer Operators...
LBL_operatorFriendStream=Friend Stream Operators...
LBL_operatorBitwise=Bitwise Operators...
LBL_operatorLogical=Logical Operators...

LBL_generate_operator=Generate Operator
LBL_operator_select=&Select operators:

MOD_EQ=// Do modulio of *this to right here\n\
return *this;
MOD={0} result(*this); // Make a copy of myself.\n\
result %= right; // Reuse compound assignment\n\
return result;
DIV_EQ=// Do division of *this to right here\n\
return *this;
DIV={0} result(*this); // Make a copy of myself.\n\
result /= right; // Reuse compound assignment\n\
return result;
MUL_EQ=// Do multiplication of *this to right here\n\
return *this;
MUL={0} result(*this); // Make a copy of myself.\n\
result *= right; // Reuse compound assignment\n\
return result;
PLUS_EQ=// Do addition of right to *this here\n\
return *this;
PLUS={0} result(*this); // Make a copy of myself.\n\
result += right; // Reuse compound assignment\n\
return result;
MINUS_EQ=// Do subtraction of right from *this here\n\
return *this;
MINUS={0} result(*this); // Make a copy of myself.\n\
result -= right; // Reuse compound assignment\n\
return result;
PLUS_PLUS=// Do actual increment\n\
return *this;
PLUS_PLUS_POSTFIX={0} result(*this); // Make a copy of myself.\n\
operator++(); // Reuse prefix operator\n\
return result;
MINUS_MINUS=// Do actual decrement\n\
return *this;
MINUS_MINUS_POSTFIX={0} result(*this); // Make a copy of myself.\n\
operator--(); // Reuse prefix operator\n\
return result;

TILDE=// Do bitwise NOT of *this here
AND_EQ=// Do bitwise AND of *this and right here\n\
return *this;
AND={0} result(*this); // Make a copy of myself.\n\
result &= right; // Reuse compound assignment\n\
return result;
OR_EQ=// Do bitwise OR of *this and right here\n\
return *this;
OR={0} result(*this); // Make a copy of myself.\n\
result |= right; // Reuse compound assignment\n\
return result;
XOR_EQ=// Do bitwise XOR of *this and right here\n\
return *this;
XOR={0} result(*this); // Make a copy of myself.\n\
result ^= right; // Reuse compound assignment\n\
return result;

EQ_EQ=bool result = false; // Compare right and *this here\n\
return result;
NOT_EQ=bool result = !(*this == right); // Reuse equals operator\n\
return result;
GREATER=// Do actual comparison
LESS=return right > *this; // Reuse greater than operator
GREATER_EQ=return !(right > *this); // Reuse greater than operator
LESS_EQ=return !(*this > right); // Reuse greater than operator

NOT=// Do actual logical negation
OR_OR=// Do actual logical OR
AND_AND=// Do actual logical AND

ASSIGNMENT=// Check for self-assignment!\n\
if (this == &right) // Same object?\n\
return *this; // Yes, so skip assignment, and just return *this.\n\
// Deallocate, allocate new space, copy values...\n\
return *this;

LEFT_SHIFT=// Write obj to stream\n\
return os;
RIGHT_SHIFT=// Read obj from stream\n\
if(/* no valid object of T found in stream */)\n\
is.setstate(std::ios::failbit);\n\
return is;

ARRAY=// Actual access to element
ARRAY_CONST=// Ether actual access to element\n\
// or reuse non-const operator, for example:\n\
return const_cast<{0}&>(*this)[index];
POINTER=
POINTER_CONST=
ARROW=
ARROW_CONST=
ADDRESS=
ADDRESS_CONST=